#include <iostream>

#define DATA_NUMS 4
#define WEIGH_NUMS 3
using namespace std;

/* 関数: dot
   2つのベクトルのドット積（内積）を計算する
   引数:
     float *v1 - 最初のベクトル
     float *v2 - 2番目のベクトル
     int len - ベクトルの長さ
   戻り値:
     float - ベクトルのドット積
*/
float dot(float *v1, float *v2, int len)
{
    float sum = 0;
    for(int i = 0; i < len; i++)
    {
        sum += v1[i] * v2[i];
    }
    return sum;
}

/* 関数: step
   ステップ関数を適用する
   引数:
     float v - 入力値
   戻り値:
     float - ステップ関数の結果（0または1）
*/
float step(float v)
{
    return v > 0 ? 1 : 0;
}

/* 関数: forward
   入力ベクトルと重みベクトルを使ってパーセプトロンの出力を計算する
   引数:
     float *x - 入力ベクトル
     float *w - 重みベクトル
     int len - ベクトルの長さ
   戻り値:
     float - パーセプトロンの出力（0または1）
*/
float forward(float *x, float *w, int len)
{
    float u = dot(x, w, len);
    return step(u);
}

/* 関数: train
   パーセプトロンの重みを更新する
   引数:
     float *w - 重みベクトル
     float *x - 入力ベクトル
     float t - 目標値
     float e - 学習率
     int len - ベクトルの長さ
*/
void train(float *w, float *x, float t, float e, int len)
{
    float z = forward(x, w, len);
    //cout << "t:" << t << endl;
    for(int j = 0; j < len; j++)
    {
        w[j] += (t - z) * x[j] * e;
        //cout << " x[" << j << "] =" << x[j] << " w[" << j << "] =" << w[j];
    }
    //cout << endl;
}

int main()
{
    // 学習率
    float e = 0.1;

    // 入力データ
    float x[DATA_NUMS][WEIGH_NUMS] = 
    {
        {1, 0, 0}, 
        {1, 0, 1}, 
        {1, 1, 0}, 
        {1, 1, 1}
    };
    
    // 論理積（AND）の目標値
    float t[DATA_NUMS] = {0, 0, 0, 1};

    // 論理和（OR）の目標値
    // float t[DATA_NUMS] = {0, 1, 1, 1};

    // 重みを0で初期化
    float w[WEIGH_NUMS] = {0, 0, 0};

    // エポック数:学習の反復回数
    int epoch = 10;

    // 学習ループ
    for(int i = 0; i < epoch; i++)
    {
        cout << "epoch:" << i << " " << endl;
        for(int j = 0; j < DATA_NUMS; j++)
        {
            train(w, x[j], t[j], e, WEIGH_NUMS);
        }
        for(int j = 0; j < WEIGH_NUMS; j++)
        {
            cout << "w" << j << ":" << w[j] << " ";
        }
        cout << endl;

        // 学習結果の表示
        for(int i = 0; i < DATA_NUMS; i++)
        {
            cout << forward(x[i], w, WEIGH_NUMS) << " ";
        }
        cout << endl;
    }

    return 0;
}

/*
epoch:0 
w0:0.1 w1:0.1 w2:0.1 
1 1 1 1 
epoch:1 
w0:0 w1:0.2 w2:0.1 
0 1 1 1 
epoch:2
w0:-0.1 w1:0.2 w2:0.1
0 0 1 1
epoch:3
w0:-0.1 w1:0.2 w2:0.2
0 1 1 1
epoch:4
w0:-0.2 w1:0.2 w2:0.1
0 0 0 1
epoch:5
w0:-0.2 w1:0.2 w2:0.1
0 0 0 1
epoch:6
w0:-0.2 w1:0.2 w2:0.1
0 0 0 1
epoch:7
w0:-0.2 w1:0.2 w2:0.1
0 0 0 1
epoch:8
w0:-0.2 w1:0.2 w2:0.1
0 0 0 1
epoch:9
w0:-0.2 w1:0.2 w2:0.1
0 0 0 1
*/


//詳細
/*
epoch:0 
t:0
 x[0] =1 w[0] =0 x[1] =0 w[1] =0 x[2] =0 w[2] =0
t:0
 x[0] =1 w[0] =0 x[1] =0 w[1] =0 x[2] =1 w[2] =0
t:0
 x[0] =1 w[0] =0 x[1] =1 w[1] =0 x[2] =0 w[2] =0
t:1
 x[0] =1 w[0] =0.1 x[1] =1 w[1] =0.1 x[2] =1 w[2] =0.1
w0:0.1 w1:0.1 w2:0.1 
1 1 1 1 
epoch:1 
t:0
 x[0] =1 w[0] =0 x[1] =0 w[1] =0.1 x[2] =0 w[2] =0.1
t:0
 x[0] =1 w[0] =-0.1 x[1] =0 w[1] =0.1 x[2] =1 w[2] =0
t:0
 x[0] =1 w[0] =-0.1 x[1] =1 w[1] =0.1 x[2] =0 w[2] =0
t:1
 x[0] =1 w[0] =0 x[1] =1 w[1] =0.2 x[2] =1 w[2] =0.1
w0:0 w1:0.2 w2:0.1
0 1 1 1
epoch:2
t:0
 x[0] =1 w[0] =0 x[1] =0 w[1] =0.2 x[2] =0 w[2] =0.1
t:0
 x[0] =1 w[0] =-0.1 x[1] =0 w[1] =0.2 x[2] =1 w[2] =0
t:0
 x[0] =1 w[0] =-0.2 x[1] =1 w[1] =0.1 x[2] =0 w[2] =0
t:1
 x[0] =1 w[0] =-0.1 x[1] =1 w[1] =0.2 x[2] =1 w[2] =0.1
w0:-0.1 w1:0.2 w2:0.1
0 0 1 1
epoch:3
t:0
 x[0] =1 w[0] =-0.1 x[1] =0 w[1] =0.2 x[2] =0 w[2] =0.1
t:0
 x[0] =1 w[0] =-0.1 x[1] =0 w[1] =0.2 x[2] =1 w[2] =0.1
t:0
 x[0] =1 w[0] =-0.2 x[1] =1 w[1] =0.1 x[2] =0 w[2] =0.1
t:1
 x[0] =1 w[0] =-0.1 x[1] =1 w[1] =0.2 x[2] =1 w[2] =0.2
w0:-0.1 w1:0.2 w2:0.2
0 1 1 1
epoch:4
t:0
 x[0] =1 w[0] =-0.1 x[1] =0 w[1] =0.2 x[2] =0 w[2] =0.2
t:0
 x[0] =1 w[0] =-0.2 x[1] =0 w[1] =0.2 x[2] =1 w[2] =0.1
t:0
 x[0] =1 w[0] =-0.2 x[1] =1 w[1] =0.2 x[2] =0 w[2] =0.1
t:1
 x[0] =1 w[0] =-0.2 x[1] =1 w[1] =0.2 x[2] =1 w[2] =0.1
w0:-0.2 w1:0.2 w2:0.1
0 0 0 1
epoch:5
t:0
 x[0] =1 w[0] =-0.2 x[1] =0 w[1] =0.2 x[2] =0 w[2] =0.1
t:0
 x[0] =1 w[0] =-0.2 x[1] =0 w[1] =0.2 x[2] =1 w[2] =0.1
t:0
 x[0] =1 w[0] =-0.2 x[1] =1 w[1] =0.2 x[2] =0 w[2] =0.1
t:1
 x[0] =1 w[0] =-0.2 x[1] =1 w[1] =0.2 x[2] =1 w[2] =0.1
w0:-0.2 w1:0.2 w2:0.1
0 0 0 1
epoch:6
t:0
 x[0] =1 w[0] =-0.2 x[1] =0 w[1] =0.2 x[2] =0 w[2] =0.1
t:0
 x[0] =1 w[0] =-0.2 x[1] =0 w[1] =0.2 x[2] =1 w[2] =0.1
t:0
 x[0] =1 w[0] =-0.2 x[1] =1 w[1] =0.2 x[2] =0 w[2] =0.1
t:1
 x[0] =1 w[0] =-0.2 x[1] =1 w[1] =0.2 x[2] =1 w[2] =0.1
w0:-0.2 w1:0.2 w2:0.1
0 0 0 1
epoch:7
t:0
 x[0] =1 w[0] =-0.2 x[1] =0 w[1] =0.2 x[2] =0 w[2] =0.1
t:0
 x[0] =1 w[0] =-0.2 x[1] =0 w[1] =0.2 x[2] =1 w[2] =0.1
t:0
 x[0] =1 w[0] =-0.2 x[1] =1 w[1] =0.2 x[2] =0 w[2] =0.1
t:1
 x[0] =1 w[0] =-0.2 x[1] =1 w[1] =0.2 x[2] =1 w[2] =0.1
w0:-0.2 w1:0.2 w2:0.1
0 0 0 1
epoch:8
t:0
 x[0] =1 w[0] =-0.2 x[1] =0 w[1] =0.2 x[2] =0 w[2] =0.1
t:0
 x[0] =1 w[0] =-0.2 x[1] =0 w[1] =0.2 x[2] =1 w[2] =0.1
t:0
 x[0] =1 w[0] =-0.2 x[1] =1 w[1] =0.2 x[2] =0 w[2] =0.1
t:1
 x[0] =1 w[0] =-0.2 x[1] =1 w[1] =0.2 x[2] =1 w[2] =0.1
w0:-0.2 w1:0.2 w2:0.1
0 0 0 1
epoch:9
t:0
 x[0] =1 w[0] =-0.2 x[1] =0 w[1] =0.2 x[2] =0 w[2] =0.1
t:0
 x[0] =1 w[0] =-0.2 x[1] =0 w[1] =0.2 x[2] =1 w[2] =0.1
t:0
 x[0] =1 w[0] =-0.2 x[1] =1 w[1] =0.2 x[2] =0 w[2] =0.1
t:1
 x[0] =1 w[0] =-0.2 x[1] =1 w[1] =0.2 x[2] =1 w[2] =0.1
w0:-0.2 w1:0.2 w2:0.1
0 0 0 1
*/